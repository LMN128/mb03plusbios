	MODULE 	bios
	DEVICE 	ZXSPECTRUM48
	OUTPUT	bios.cde
	
;███████████████ V A R I A B L E S ██████████████████████████████████████		
DMA 		equ #0B
ULA			equ #FE
ZXi_port0	equ #703B
ZXi_port1	equ #713B
ZXi_port2	equ #723B
ZXi_port3	equ #733B
ZXi_port4	equ #743B
ZXi_port5	equ #753B
ZXi_port6	equ #763B
ZXi_port7	equ #773B
ZXi_port8	equ #783B

g_ZXi_port0	equ #7C3B
g_ZXi_port1	equ #7D3B
;███████████████ M A I N  C O D E ███████████████████████████████████████	
			org 49152		
maincode
			DISP 0
bios		di
			ld sp,0
			im 1
			xor	a
			ld	i,a
			jr boot2
			db "LMN128"
//WARNING max #38 bytes!!!!			
endboot		BLOCK #38-endboot,0
;			DISP #38
im1			ei
			ret					
boot2
			ld hl,ramcodeinrom
			ld de,ramcode
			ld bc,endramcode-ramcode
			ldir
			jp ramcode

ramcodeinrom	

			ent						; restore address to compile to right place
ramcode		
			di						; for sna test
			ld sp,0					; for sna test
			xor a
			out (ULA),a
			ld	hl, 5AFFh
			ld	de, 5AFEh
			ld	bc, 1AFFh
			ld	(hl), a
			lddr					; Clear	videoram (black	screen)	
			ld   a,7
			ld   HL,22528
			ld   DE,22529
			ld   BC,767
			ld   (HL),a
			ldir
			ld hl, STRIPS
			ld bc,#0000
			ld	(txy32.cursor),bc
			call txy32.txy

;carymary         
			 ld bc,#0600
			 ld de,#06ff
			 call draw_jugo.DRAW
		
			ld	bc,#080C
			ld	(txy51.cursor),bc
			ld	hl,TEXT1
			call txy51.txy
			ld	bc,#08CE
			ld	(txy51.cursor),bc
			ld	hl,DATE
			call txy51.txy
			
//carymary2
			LD HL, STRIPS
			ld bc,#1700
			ld	(txy32.cursor),bc			
			call txy32.txy

			ld bc,#1100
			ld de,#11FF
			call draw_jugo.DRAW		

			xor a
			ld bc,ZXi_port0				//ZXi portselect
			out (c),a
			ld a,#FF
			inc b	
			out (c),a

			xor a
			ld bc,g_ZXi_port0
			out (c),a
			inc b
			out (c),a  //select 0 - external device - MB03+
			
			ld a,#E2				//FRAM active/write Area 1
			out (#53),a	

chn_reg		call clean
			ld	bc,#B000
			ld	(txy51.cursor),bc
			ld	hl,TEXT2
			call txy51.txy
			ld	bc,#B800
			ld	(txy51.cursor),bc
			ld	hl,TEXT3
			call txy51.txy
num_reg		ld a,0
get_reg		ld hl, REG_TAB
			sla a
			sla a
			sla a
			ld e,a
			ld d,0
			add hl,de
			ld a,(hl)
			ld (MOD1+1),a			
			inc hl
			ld a,(hl)
			ld (MOD1+2),a
			inc hl
			ld a,(hl)
			ld (mode_mod+1),a  			//mode
			inc hl
			ld a,(hl)
			ld (max_cur+1),a
			inc hl
			ld a,(hl)			//get adress for set call
			ld (set_call+1),a
			ld (set_call1+1),a			
			inc hl
			ld a,(hl)
			ld (set_call+2),a
			ld (set_call1+2),a
			inc hl
			ld a,(hl)			//get fram address
			ld (fram_add+1),a			
			inc hl
			ld a,(hl)
			ld (fram_add+2),a
MOD1		call 0
			ld (show_cur+1),a
new_cur
			ld hl, DESELECT
			ld bc,#20F0
			ld	(txy32.cursor),bc
			
			call txy32.txy
			
fram_add	ld a,(#FFFF)
//			ld (show_cur+1),a

			ld h,0
			ld l,a			

			ld	bc,#20F0
			ld	(txy51.cursor),bc
			call NUMBER2


show_cur	ld a,0
max_cur		cp 0
			jr nc,1F 				//mimo rozsah
			ld hl, DESELECT
del_cur		ld bc,#3000
			ld	(txy32.cursor),bc
			push af
			call txy32.txy
			pop af
			sla a
			sla a
			sla a
			ld	hl,#3006
			add a,h
			ld b,a
			ld c,l
			ld	(txy51.cursor),bc
			ld	hl,SELECT
			push bc
			call txy51.txy
			pop af
			
			ld (del_cur+2),a
1

loopkey		
1
			call iinkey.ANYKEY		; waiting for key
			jr z,1B

1			cp "5"					//left
			jr nz,1F
2			ld a,(num_reg+1)
			dec a
			cp 255
			jr nz,3F
			ld a,reg_number-1
3			ld (num_reg+1),a
			jp chn_reg
1			cp 8					//left
			jr z,2B

			cp "8"					//right
			jr nz,1F
2			ld a,(num_reg+1)
			inc a
			cp reg_number				
			jr nz,3F
			xor a
3			ld (num_reg+1),a
			jp chn_reg	
1			cp 9					//right
			jr z,2B

			cp "6"					//down
			jr nz,1F
2			ld a, (max_cur+1)
			ld e,a
			ld a, (show_cur+1)
			inc a
			cp e
			jr z,loopkey
			ld (show_cur+1),a
			jp mode0
1			cp 10					//down
			jr z,2B			

			cp "7"					//up
			jr nz,1F
2			ld a, (show_cur+1)
			dec a
			cp 255
			jr z,loopkey
			ld (show_cur+1),a
			jr mode0
1			cp 11					//up
			jr z,2B	

			cp 13
			jr nz,1F
			ld a,(mode_mod+1)
			and a
			jr z,loopkey
set_call1	call 0    //mode1 call
			jp chn_reg					

1			cp "L"
			jp nz,1F
			ld hl,defaults
			ld de,#2000
			ld b,#00
			ld c,(hl)	
		    inc hl
			ldir
			jr restart			

1			cp "R"					//save and reset
			jp nz, loopkey
restart		ld bc,ZXi_port0				//ZXi portselect
			out (c),a
			ld a,#FF
			inc b		
			out (c),a
			xor a
			out (#27),a
			out (#67),a
;			ld a,2
			out (#07),a
			inc a
			out (#47),a
			ld a,%01100000	;enable flash write disable
			out (#53),a
//			call clean
			rst 0

mode0
mode_mod	ld a,0
			and a	
			ld a,(show_cur+1)
set_call	call z,0 	//mode0 call
			jp new_cur
;------------------------------
;HL-HODNOTA
;TISKNE CISLO TYPU INTEGER
NUMBER4  ld   de,-10000
         call NUM_JED
NUMBER3  ld   de,-1000
         call NUM_JED
NUMBER2  ld   de,-100
         call NUM_JED
NUMBER1  ld   de,-10
         call NUM_JED
NUMBER0  ld   a,l
         add  a,48
         jp   txy51.xy

NUM_JED  xor  a
NUM_JED1 add  hl,de
         jr   nc,NUM_PRIC
         inc  a
         jr   NUM_JED1
NUM_PRIC sbc  hl,de
         add  a,48
         push bc
         push hl
         call txy51.xy
         pop  hl
         pop  bc
         ;;inc  c
         ret



clean		ld a,8			//clear place
			ld hl, 16384+96+0
			ld de, 16384+96+0+1
			ld bc,255-96
1			ld (hl),0
			push bc
			ldir
			pop bc
			and a
			sbc hl,bc
			inc h
			ld d,h
			ld e,l
			inc e
			dec a
			jr nz, 1B

			ld hl, 16384+2048
			ld de, 16384+2048+1
			ld bc,4095
			ld (hl),l
			ldir					
			ret	

STARTUP			ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,STARTUP1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,STARTUP2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,STARTUP3
			call txy51.txy
			ld	bc,#4010
			ld	(txy51.cursor),bc
			ld	hl,STARTUP4
			call txy51.txy
			ld	bc,#4810
			ld	(txy51.cursor),bc
			ld	hl,STARTUP5
			call txy51.txy
			ld	bc,#6803
			ld	(txy51.cursor),bc
			ld	hl,STARTUPinfo
			call txy51.txy
			
			ld hl, (fram_add+1)
			ld a,(hl)
			ex af,af'
			ld a,(max_cur+1)
			ld b,a
			ex af,af'
			ld hl,STARTUP_VAL
			call cur_num
			ret

startup_set		ld hl,STARTUP_VAL
			ld d,0
			ld e,a
			add hl,de
			ld a, (HL)
			push af
			ld hl, (fram_add+1)
			ld (hl),a
			ld bc, ZXi_port0
			ld a,#22
			out (c),a
			inc b
			pop af
			out (c),a

			ret
		
STARTUP_VAL		db 0,1,2,3,4,5,6,7,8,9,#A

AUDIO
			ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,AUDIO1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,AUDIO2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,AUDIO3
			call txy51.txy
			ld	bc,#4010
			ld	(txy51.cursor),bc
			ld	hl,AUDIO4
			call txy51.txy
			ld	bc,#4810
			ld	(txy51.cursor),bc
			ld	hl,AUDIO5
			call txy51.txy
			ld	bc,#5010
			ld	(txy51.cursor),bc
			ld	hl,AUDIO6
			call txy51.txy
			ld	bc,#5810
			ld	(txy51.cursor),bc
			ld	hl,AUDIO7
			call txy51.txy
			
			ld hl, (fram_add+1)			
			ld a,(max_cur+1)
			ld e,a
			ld a,(hl)
			ld	bc,#30FA
2			ld	(txy51.cursor),bc
			rrca
			push af
			ld a, "0"
			jr nc,1F
			inc a
1			
			push bc
			push hl
			push de
			call txy51.xy
			pop de
			pop hl
			pop bc
			ld a,8
			add a,b
			ld b,a
			inc hl
			pop af
			dec e
			jr nz, 2B
			xor a
			ret

audio_set	ld a,(show_cur+1)
			inc a
			ld b,a
			ld a,%10000000
1			rlc a
			djnz 1B
			ld hl, (fram_add+1)
			xor (hl)
			ld (hl),a
			push af
			ld bc, ZXi_port0
			ld a,#01
			out (c),a
			inc b
			pop af
			out (c),a
			ret		

LED			ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,LED1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,LED2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,LED3
			call txy51.txy
			ld	bc,#4010
			ld	(txy51.cursor),bc
			ld	hl,LED4
			call txy51.txy
			ld	bc,#4810
			ld	(txy51.cursor),bc
			ld	hl,LED5
			call txy51.txy
			ld	bc,#5010
			ld	(txy51.cursor),bc
			ld	hl,LED6
			call txy51.txy
			ld	bc,#5810
			ld	(txy51.cursor),bc
			ld	hl,LED7
			call txy51.txy
			ld	bc,#6010
			ld	(txy51.cursor),bc
			ld	hl,LED8
			call txy51.txy
			ld	bc,#6810
			ld	(txy51.cursor),bc
			ld	hl,LED9
			call txy51.txy

			ld hl, (fram_add+1)
			ld a,(hl)
			ex af,af'
			ld a,(max_cur+1)
			ld b,a
			ex af,af'
			ld hl,LED_VAL
			call cur_num
			ret

led_set		ld hl,LED_VAL
			ld d,0
			ld e,a
			add hl,de
			ld a, (HL)
			push af
			ld hl, (fram_add+1)
			ld (hl),a
			ld bc, ZXi_port0
			ld a,4
			out (c),a
			inc b
			pop af
			out (c),a

			ret
		
LED_VAL		db 0,1,2,3,4,5,6,7,8,9,#A

ESP
			ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,ESP1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,ESP2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,ESP3
			call txy51.txy
						
			ld hl, (fram_add+1)			
			ld a,(max_cur+1)
			ld e,a
			ld a,(hl)
			ld	bc,#30FA
2			ld	(txy51.cursor),bc
			rrca
			push af
			ld a, "0"
			jr nc,1F
			inc a
1			
			push bc
			push hl
			push de
			call txy51.xy
			pop de
			pop hl
			pop bc
			ld a,8
			add a,b
			ld b,a
			inc hl
			pop af
			dec e
			jr nz, 2B
			xor a
			ret

esp_set		ld a,(show_cur+1)
			inc a
			ld b,a
			ld a,%10000000
1			rlc a
			djnz 1B
			ld hl, (fram_add+1)
			xor (hl)
			ld (hl),a
			push af
			ld bc, ZXi_port0
			ld a,#05
			out (c),a
			inc b
			pop af
			out (c),a
			ret	

MMC
			ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,MMC1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,MMC2
			call txy51.txy
						
			ld hl, (fram_add+1)			
			ld a,(max_cur+1)
			ld e,a
			ld a,(hl)
			ld	bc,#30FA
2			ld	(txy51.cursor),bc
			rrca
			push af
			ld a, "0"
			jr nc,1F
			inc a
1			
			push bc
			push hl
			push de
			call txy51.xy
			pop de
			pop hl
			pop bc
			ld a,8
			add a,b
			ld b,a
			inc hl
			pop af
			dec e
			jr nz, 2B
			xor a
			ret

mmc_set		ld a,(show_cur+1)
			inc a
			ld b,a
			ld a,%10000000
1			rlc a
			djnz 1B
			ld hl, (fram_add+1)
			xor (hl)
			ld (hl),a
			push af
			ld bc, ZXi_port0
			ld a,#06
			out (c),a
			inc b
			pop af
			out (c),a
			ret				

DV			ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,DV1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,DV2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,DV3
			call txy51.txy
			ld	bc,#4010
			ld	(txy51.cursor),bc
			ld	hl,DV4
			call txy51.txy
			ld	bc,#4810
			ld	(txy51.cursor),bc
			ld	hl,DV5
			call txy51.txy
			ld	bc,#5010
			ld	(txy51.cursor),bc
			ld	hl,DV51
			call txy51.txy
			ld	bc,#5810
			ld	(txy51.cursor),bc
			ld	hl,DV52
			call txy51.txy
			ld	bc,#6010
			ld	(txy51.cursor),bc
			ld	hl,DV53
			call txy51.txy
/*			ld	bc,#6810
			ld	(txy51.cursor),bc
			ld	hl,DV6
			call txy51.txy
			ld	bc,#7010
			ld	(txy51.cursor),bc
			ld	hl,DV7
			call txy51.txy*/
			ld hl, (fram_add+1)
			ld a,(hl)
			ex af,af'
			ld a,(max_cur+1)
			ld b,a
			ex af,af'
			ld hl,DV_VAL
			call cur_num
			ret

dv_set		ld hl,DV_VAL
			ld d,0
			ld e,a
			add hl,de
			ld a, (HL)
			push af
			ld hl, (fram_add+1)
			bit 7,a
			jr nz, 1F //don't save
			ld (hl),a
1			ld bc, ZXi_port0
			ld a,9
			out (c),a
			inc b
			pop af
			out (c),a

			ret
						
DV_VAL		db 0,1,2,3,4,5,6,#FE,#FF			

DVO
			ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,DVO1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,DVO2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,DVO3
			call txy51.txy
			ld	bc,#4010
			ld	(txy51.cursor),bc
			ld	hl,DVO4
			call txy51.txy
			ld hl, (fram_add+1)
			
			ld a,(max_cur+1)
			ld e,a
			ld a,(hl)
			ld	bc,#30FA
2			ld	(txy51.cursor),bc
			rrca
			push af
			ld a, "0"
			jr nc,1F
			inc a
1			
			push bc
			push hl
			push de
			call txy51.xy
			pop de
			pop hl
			pop bc
			ld a,8
			add a,b
			ld b,a
			inc hl
			pop af
			dec e
			jr nz, 2B
			xor a
			ret

dvo_set		ld a,(show_cur+1)
			inc a
			ld b,a
			ld a,%10000000
1			rlc a
			djnz 1B
			ld hl, (fram_add+1)
			xor (hl)
			ld (hl),a
			push af
			ld bc, ZXi_port0
			ld a,#A
			out (c),a
			inc b
			pop af
			out (c),a
			ret		

DVE			ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,DVE1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,DVE2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,DVE3
			call txy51.txy
			ld	bc,#4010
			ld	(txy51.cursor),bc
			ld	hl,DVE4
			call txy51.txy
			ld	bc,#4810
			ld	(txy51.cursor),bc
			ld	hl,DVE5
			call txy51.txy
/*			ld	bc,#5010
			ld	(txy51.cursor),bc
			ld	hl,DVE6
			call txy51.txy*/

			ld hl, (fram_add+1)
			ld a,(hl)
			ex af,af'
			ld a,(max_cur+1)
			ld b,a
			ex af,af'
			ld hl,DVE_VAL
			call cur_num
			ret

dve_set		ld hl,DVE_VAL
			ld d,0
			ld e,a
			add hl,de
			ld a, (HL)
			push af
			ld hl, (fram_add+1)
			ld (hl),a
			ld bc, ZXi_port0
			ld a,#B
			out (c),a
			inc b
			pop af
			out (c),a

			ret
		
DVE_VAL		db 0,1,2,3,4,5,6,7,8,9

DVT
			ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,DVT1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,DVT2
			call txy51.txy
						
			ld hl, (fram_add+1)
			
			ld a,(max_cur+1)
			ld e,a
			ld a,(hl)
			ld	bc,#30FA
2			ld	(txy51.cursor),bc
			rrca
			push af
			ld a, "0"
			jr nc,1F
			inc a
1			
			push bc
			push hl
			push de
			call txy51.xy
			pop de
			pop hl
			pop bc
			ld a,8
			add a,b
			ld b,a
			inc hl
			pop af
			dec e
			jr nz, 2B
			xor a
			ret

dvt_set		ld a,(show_cur+1)
			inc a
			ld b,a
			ld a,%10000000
1			rlc a
			djnz 1B
			ld hl, (fram_add+1)
			xor (hl)
			ld (hl),a
			push af
			ld bc, ZXi_port0
			ld a,#C 	//ZXi register
			out (c),a
			inc b
			pop af
			out (c),a
			ret

DVU
			ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,DVU1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,DVU2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,DVU3
			call txy51.txy
			ld	bc,#4010
			ld	(txy51.cursor),bc
			ld	hl,DVU4
			call txy51.txy
			
			ld hl, (fram_add+1)
			
			ld a,(max_cur+1)
			ld e,a
			ld a,(hl)
			ld	bc,#30FA
2			ld	(txy51.cursor),bc
			rrca
			push af
			ld a, "0"
			jr nc,1F
			inc a
1			
			push bc
			push hl
			push de
			call txy51.xy
			pop de
			pop hl
			pop bc
			ld a,8
			add a,b
			ld b,a
			inc hl
			pop af
			dec e
			jr nz, 2B
			xor a
			ret

dvu_set		ld a,(show_cur+1)
			inc a
			ld b,a
			ld a,%10000000
1			rlc a
			djnz 1B
			ld hl, (fram_add+1)
			xor (hl)
			ld (hl),a
			push af
			ld bc, ZXi_port0
			ld a,#D 	//ZXi register
			out (c),a
			inc b
			pop af
			out (c),a
			ret

TSFM
			ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,TSFM1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,TSFM2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,TSFM3
			call txy51.txy
			ld	bc,#4010
			ld	(txy51.cursor),bc
			ld	hl,TSFM4
			call txy51.txy
			
			ld hl, (fram_add+1)			
			ld a,(max_cur+1)
			ld e,a
			ld a,(hl)
			ld	bc,#30FA
2			ld	(txy51.cursor),bc
			rrca
			push af
			ld a, "0"
			jr nc,1F
			inc a
1			
			push bc
			push hl
			push de
			call txy51.xy
			pop de
			pop hl
			pop bc
			ld a,8
			add a,b
			ld b,a
			inc hl
			pop af
			dec e
			jr nz, 2B
			xor a
			ret

tsfm_set	ld a,(show_cur+1)
			inc a
			ld b,a
			ld a,%10000000
1			rlc a
			djnz 1B
			ld hl, (fram_add+1)
			xor (hl)
			ld (hl),a
			push af
			ld bc, ZXi_port0
			ld a,#18
			out (c),a
			inc b
			pop af
			out (c),a
			ret		

SID
			ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,SID1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,SID2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,SID3
			call txy51.txy
			
			ld hl, (fram_add+1)			
			ld a,(max_cur+1)
			ld e,a
			ld a,(hl)
			ld	bc,#30FA
2			ld	(txy51.cursor),bc
			rrca
			push af
			ld a, "0"
			jr nc,1F
			inc a
1			
			push bc
			push hl
			push de
			call txy51.xy
			pop de
			pop hl
			pop bc
			ld a,8
			add a,b
			ld b,a
			inc hl
			pop af
			dec e
			jr nz, 2B
			xor a
			ret

sid_set	ld a,(show_cur+1)
			inc a
			ld b,a
			ld a,%10000000
1			rlc a
			djnz 1B
			ld hl, (fram_add+1)
			xor (hl)
			ld (hl),a
			push af
			ld bc, ZXi_port0
			ld a,#19
			out (c),a
			inc b
			pop af
			out (c),a
			ret			

DVP
			ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,DVP1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,DVP2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,DVP3
			call txy51.txy
			ld	bc,#4010
			ld	(txy51.cursor),bc
			ld	hl,DVP4
			call txy51.txy
			ld	bc,#4810
			ld	(txy51.cursor),bc
			ld	hl,DVP5
			call txy51.txy
			ld	bc,#5010
			ld	(txy51.cursor),bc
			ld	hl,DVP6
			call txy51.txy
			ld	bc,#5810
			ld	(txy51.cursor),bc
			ld	hl,DVP7
			call txy51.txy
			ld	bc,#6010
			ld	(txy51.cursor),bc
			ld	hl,DVP8
			call txy51.txy
			ld	bc,#6810
			ld	(txy51.cursor),bc
			ld	hl,DVP9
			call txy51.txy

			ld hl, (fram_add+1)
			ld a,(hl)
			ex af,af'
			ld a,(max_cur+1)
			ld b,a
			ex af,af'
			ld hl,DVP_VAL
			call cur_num
			ret

dvp_set		ld hl,DVP_VAL
			ld d,0
			ld e,a
			add hl,de
			ld a, (HL)
			push af
			ld hl, (fram_add+1)
			ld (hl),a
			ld bc, ZXi_port0
			ld a,#0F
			out (c),a
			inc b
			pop af
			out (c),a

			ret
		
DVP_VAL		db 0,1,2,3,4,5,6,7,8,9	

CROM		ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,CROM1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,CROM2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,CROM3
			call txy51.txy
			ld	bc,#4010
			ld	(txy51.cursor),bc
			ld	hl,CROM4
			call txy51.txy
			ld	bc,#4810
			ld	(txy51.cursor),bc
			ld	hl,CROM5
			call txy51.txy
			ld	bc,#5010
			ld	(txy51.cursor),bc
			ld	hl,CROM6
			call txy51.txy
			ld	bc,#5810
			ld	(txy51.cursor),bc
			ld	hl,CROM7
			call txy51.txy
			ld	bc,#6010
			ld	(txy51.cursor),bc
			ld	hl,CROM8
			call txy51.txy
			ld	bc,#6810
			ld	(txy51.cursor),bc
			ld	hl,CROM9
			call txy51.txy
			ld	bc,#7010
			ld	(txy51.cursor),bc
			ld	hl,CROMA
			call txy51.txy
			ld	bc,#7810
			ld	(txy51.cursor),bc
			ld	hl,CROMB
			call txy51.txy
			ld	bc,#8010
			ld	(txy51.cursor),bc
			ld	hl,CROMC
			call txy51.txy


			ld hl, (fram_add+1)
			ld a,(hl)
			ex af,af'
			ld a,(max_cur+1)
			ld b,a
			ex af,af'
			ld hl,crom_VAL
			call cur_num
			ret

crom_set	ld hl,crom_VAL
			ld d,0
			ld e,a
			add hl,de
			ld a, (HL)
			push af
			ld hl, (fram_add+1)
			ld (hl),a
			ld bc, ZXi_port0
			ld a,#10
			out (c),a
			inc b
			pop af
			out (c),a

			ret
		
crom_VAL	db 0,1,2,3,4,5,6,7,8,9,#A,#B,#C
MICE
			ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,MICE1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,MICE2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,MICE3
			call txy51.txy
			ld	bc,#4010
			ld	(txy51.cursor),bc
			ld	hl,MICE4
			call txy51.txy
			ld	bc,#4810
			ld	(txy51.cursor),bc
			ld	hl,MICE5
			call txy51.txy
						
			ld hl, (fram_add+1)
			ld a,(hl)
			ex af,af'
			ld a,(max_cur+1)
			ld b,a
			ex af,af'
			ld hl,mice_VAL
			call cur_num
			ret

mice_set	ld hl,mice_VAL
			ld d,0
			ld e,a
			add hl,de
			ld a, (HL)
			push af
			ld hl, (fram_add+1)
			ld (hl),a
			ld bc, ZXi_port0
			ld a,#11
			out (c),a
			inc b
			pop af
			out (c),a

			ret
		
mice_VAL	db 0,1,2,3,4,5

ZCSD
			ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,ZCSD1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,ZCSD2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,ZCSD3
			call txy51.txy
			ld	bc,#4010
			ld	(txy51.cursor),bc
			ld	hl,ZCSD4
			call txy51.txy
						
			ld hl, (fram_add+1)
			ld a,(hl)
			ex af,af'
			ld a,(max_cur+1)
			ld b,a
			ex af,af'
			ld hl,zcsd_VAL
			call cur_num
			ret

zcsd_set	ld hl,mice_VAL
			ld d,0
			ld e,a
			add hl,de
			ld a, (HL)
			push af
			ld hl, (fram_add+1)
			ld (hl),a
			ld bc, ZXi_port0
			ld a,#2C
			out (c),a
			inc b
			pop af
			out (c),a

			ret
		
zcsd_VAL	db 0,1,2,3

DIVSD
			ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,DIVSD1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,DIVSD2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,DIVSD3
			call txy51.txy
/*			ld	bc,#4010
			ld	(txy51.cursor),bc
			ld	hl,DVU4
			call txy51.txy*/
			
			ld hl, (fram_add+1)
			
			ld a,(max_cur+1)
			ld e,a
			ld a,(hl)
			ld	bc,#30FA
2			ld	(txy51.cursor),bc
			rrca
			push af
			ld a, "0"
			jr nc,1F
			inc a
1			
			push bc
			push hl
			push de
			call txy51.xy
			pop de
			pop hl
			pop bc
			ld a,8
			add a,b
			ld b,a
			inc hl
			pop af
			dec e
			jr nz, 2B
			xor a
			ret

divsd_set	ld a,(show_cur+1)
			inc a
			ld b,a
			ld a,%10000000
1			rlc a
			djnz 1B
			ld hl, (fram_add+1)
			xor (hl)
			ld (hl),a
			push af
			ld bc, ZXi_port0
			ld a,#2D 	//ZXi register
			out (c),a
			inc b
			pop af
			out (c),a
			ret
NMI0
			ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,NMI1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,NMI2
			call txy51.txy
						
			ld hl, (fram_add+1)
			
			ld a,(max_cur+1)
			ld e,a
			ld a,(hl)
			ld	bc,#30FA
2			ld	(txy51.cursor),bc
			rrca
			push af
			ld a, "0"
			jr nc,1F
			inc a
1			
			push bc
			push hl
			push de
			call txy51.xy
			pop de
			pop hl
			pop bc
			ld a,8
			add a,b
			ld b,a
			inc hl
			pop af
			dec e
			jr nz, 2B
			xor a
			ret

nmi_set		ld a,(show_cur+1)
			inc a
			ld b,a
			ld a,%10000000
1			rlc a
			djnz 1B
			ld hl, (fram_add+1)
			xor (hl)
			ld (hl),a
			push af
			ld bc, ZXi_port0
			ld a,#2E	//ZXi register
			out (c),a
			inc b
			pop af
			out (c),a
			ret
INT0
			ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,INT1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,INT2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,INT3
			call txy51.txy
						
			ld hl, (fram_add+1)
			
			ld a,(max_cur+1)
			ld e,a
			ld a,(hl)
			ld	bc,#30FA
2			ld	(txy51.cursor),bc
			rrca
			push af
			ld a, "0"
			jr nc,1F
			inc a
1			
			push bc
			push hl
			push de
			call txy51.xy
			pop de
			pop hl
			pop bc
			ld a,8
			add a,b
			ld b,a
			inc hl
			pop af
			dec e
			jr nz, 2B
			xor a
			ret

int_set		ld a,(show_cur+1)
			inc a
			ld b,a
			ld a,%10000000
1			rlc a
			djnz 1B
			ld hl, (fram_add+1)
			xor (hl)
			ld (hl),a
			push af
			ld bc, ZXi_port0
			ld a,#2F	//ZXi register
			out (c),a
			inc b
			pop af
			out (c),a
			ret			
DMA0
			ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,DMA1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,DMA2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,DMA3
			call txy51.txy
						
			ld hl, (fram_add+1)
			
			ld a,(max_cur+1)
			ld e,a
			ld a,(hl)
			ld	bc,#30FA
2			ld	(txy51.cursor),bc
			rrca
			push af
			ld a, "0"
			jr nc,1F
			inc a
1			
			push bc
			push hl
			push de
			call txy51.xy
			pop de
			pop hl
			pop bc
			ld a,8
			add a,b
			ld b,a
			inc hl
			pop af
			dec e
			jr nz, 2B
			xor a
			ret

dma_set		ld a,(show_cur+1)
			inc a
			ld b,a
			ld a,%10000000
1			rlc a
			djnz 1B
			ld hl, (fram_add+1)
			xor (hl)
			ld (hl),a
			push af
			ld bc, ZXi_port0
			ld a,#12	//ZXi register
			out (c),a
			inc b
			pop af
			out (c),a
			ret			

EXTS0		ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,EXTS1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,EXTS2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,EXTS3
			call txy51.txy
			ld	bc,#4010
			ld	(txy51.cursor),bc
			ld	hl,EXTS4
			call txy51.txy
			ld	bc,#4810
			ld	(txy51.cursor),bc
			ld	hl,EXTS5
			call txy51.txy
			
			ld hl, (fram_add+1)
			ld a,(hl)
			ex af,af'
			ld a,(max_cur+1)
			ld b,a
			ex af,af'
			ld hl,exts_VAL
			call cur_num
			ret

exts_set	ld hl,exts_VAL
			ld d,0
			ld e,a
			add hl,de
			ld a, (HL)
			push af
			ld hl, (fram_add+1)
			ld (hl),a
			ld bc, ZXi_port0
			ld a,#20
			out (c),a
			inc b
			pop af
			out (c),a

			ret

exts_VAL	db 0,1,2,3,4,5		

ZONE0		ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,ZONE1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,ZONE2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,ZONE3
			call txy51.txy
			ld	bc,#4010
			ld	(txy51.cursor),bc
			ld	hl,ZONE4
			call txy51.txy
			ld	bc,#4810
			ld	(txy51.cursor),bc
			ld	hl,ZONE5
			call txy51.txy
			ld	bc,#5010
			ld	(txy51.cursor),bc
			ld	hl,ZONE6
			call txy51.txy
			ld	bc,#5810
			ld	(txy51.cursor),bc
			ld	hl,ZONE7
			call txy51.txy
			ld	bc,#6010
			ld	(txy51.cursor),bc
			ld	hl,ZONE8
			call txy51.txy
			ld	bc,#6810
			ld	(txy51.cursor),bc
			ld	hl,ZONE9
			call txy51.txy
			ld	bc,#7010
			ld	(txy51.cursor),bc
			ld	hl,ZONEA
			call txy51.txy
			ld	bc,#7810
			ld	(txy51.cursor),bc
			ld	hl,ZONEB
			call txy51.txy
			ld	bc,#8010
			ld	(txy51.cursor),bc
			ld	hl,ZONEC
			call txy51.txy
			ld	bc,#8810
			ld	(txy51.cursor),bc
			ld	hl,ZONED
			call txy51.txy
			ld	bc,#9010
			ld	(txy51.cursor),bc
			ld	hl,ZONEE
			call txy51.txy
			ld	bc,#9810
			ld	(txy51.cursor),bc
			ld	hl,ZONEF
			call txy51.txy
			
			ld hl, (fram_add+1)
			ld a,(hl)
			ex af,af'
			ld a,(max_cur+1)
			ld b,a
			ex af,af'
			ld hl,exts_VAL
			call cur_num
			ret

zone_set	ld hl,zone_VAL
			ld d,0
			ld e,a
			add hl,de
			ld a, (HL)
			push af
			ld hl, (fram_add+1)
			ld (hl),a
			ld bc, ZXi_port0
			ld a,#40
			out (c),a
			inc b
			pop af
			out (c),a

			ret			
		
zone_VAL	db 0,1,2,3,4,5,#F8,#F9,#FA,#FB,#FC,#FD,#FE,#FF

DEBUG0		ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,DEBUG1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,DEBUG2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,DEBUG3
			call txy51.txy
			ld	bc,#4010
			ld	(txy51.cursor),bc
			ld	hl,DEBUG31
			call txy51.txy
			ld	bc,#4810
			ld	(txy51.cursor),bc
			ld	hl,DEBUG32
			call txy51.txy
			ld	bc,#5010
			ld	(txy51.cursor),bc
			ld	hl,DEBUG4
			call txy51.txy
			ld	bc,#5810
			ld	(txy51.cursor),bc
			ld	hl,DEBUG5
			call txy51.txy
			
			ld hl, (fram_add+1)
			ld a,(hl)
			ex af,af'
			ld a,(max_cur+1)
			ld b,a
			ex af,af'
			ld hl,debug_VAL
			call cur_num
			ret

debug_set	ld hl,debug_VAL
			ld d,0
			ld e,a
			add hl,de
			ld a, (HL)
			push af
			ld hl, (fram_add+1)
			bit 7,a
			jr nz, 1F //don't save
			ld (hl),a
1			ld bc, ZXi_port0
			ld a,#3F
			out (c),a
			inc b
			pop af
			out (c),a

			ret
		
debug_VAL	db 0,1,2,4,#FE,#FF


JOY			ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,JOY1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,JOY2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,JOY3
			call txy51.txy
			ld	bc,#4010
			ld	(txy51.cursor),bc
/*			ld	hl,JOY4
			call txy51.txy
			ld	bc,#4810
			ld	(txy51.cursor),bc
			ld	hl,JOY5
			call txy51.txy
			ld	bc,#5010
			ld	(txy51.cursor),bc
			ld	hl,JOY6
			call txy51.txy
			ld	bc,#5810
			ld	(txy51.cursor),bc
			ld	hl,JOY7
			call txy51.txy
			ld	bc,#6010
			ld	(txy51.cursor),bc
			ld	hl,JOY8
			call txy51.txy	*/
			ld hl, (fram_add+1)
			ld a,(hl)
			ex af,af'
			ld a,(max_cur+1)
			ld b,a
			ex af,af'
			ld hl,JOY_VAL
			call cur_num
			ret

joy_set		ld hl,JOY_VAL
			ld d,0
			ld e,a
			add hl,de
			ld a, (HL)
			push af
			ld hl, (fram_add+1)
			ld (hl),a
			ld bc, ZXi_port0
			ld a,3
			out (c),a
			inc b
			pop af
			out (c),a

			ret
JOY_VAL		db 0,1,2,3,4,5,6,7

UART0		ld	bc,#2003
			ld	(txy51.cursor),bc
			ld	hl,UART1
			call txy51.txy
			ld	bc,#3010
			ld	(txy51.cursor),bc
			ld	hl,UART2
			call txy51.txy
			ld	bc,#3810
			ld	(txy51.cursor),bc
			ld	hl,UART3
			call txy51.txy			
			
			ld hl, (fram_add+1)
			ld a,(hl)
			ex af,af'
			ld a,(max_cur+1)
			ld b,a
			ex af,af'
			ld hl,debug_VAL
			call cur_num
			ret

uart_set	ld hl,uart_VAL
			ld d,0
			ld e,a
			add hl,de
			ld a, (HL)
			push af
			ld hl, (fram_add+1)
			ld (hl),a
			ld bc, ZXi_port0
			ld a,#39
			out (c),a
			inc b
			pop af
			out (c),a

			ret
		
uart_VAL	db 0,1,2,3		


reg_number  equ 25
REG_TAB
			dw STARTUP
			db 0,4
			dw startup_set
			dw #2022
			
			dw DV
			db 0,7
			dw dv_set
			dw #2009

			dw LED
			db 0,8
			dw led_set
			dw #2004 		

			dw AUDIO
			db 1,6
			dw audio_set
			dw #2001 //FRAM address
			
			dw TSFM
			db 1,3
			dw tsfm_set
			dw #2018 
		
			dw SID
			db 1,2
			dw sid_set
			dw #2019 

			dw JOY
			db 0,2
			dw joy_set
			dw #2007 

			dw MICE
			db 0,4
			dw mice_set
			dw #2011 
			
			dw EXTS0
			db 0,4
			dw exts_set
			dw #2020 

			dw DVT
			db 1,1
			dw dvt_set
			dw #200C  

			dw DVU
			db 1,3
			dw dvu_set
			dw #200D	
			
			dw DVE
			db 0,4
			dw dve_set
			dw #200B 

			dw DVP
			db 0,8
			dw dvp_set
			dw #200F
			
			dw DVO
			db 1,3
			dw dvo_set
			dw #200A 	
			
			dw MMC
			db 1,1
			dw mmc_set
			dw #2006 

			dw ZCSD
			db 0,3
			dw zcsd_set
			dw #202C 

			dw DIVSD
			db 1,2
			dw divsd_set
			dw #202D

			dw ESP
			db 1,2
			dw esp_set
			dw #2005 

			dw UART0
			db 0,2
			dw uart_set
			dw #2039 

			dw DMA0
			db 1,2
			dw dma_set
			dw #2012 
			
			dw NMI0
			db 1,1
			dw nmi_set
			dw #202E 

			dw INT0
			db 1,2
			dw nmi_set
			dw #202F

			dw CROM
			db 0,#B
			dw crom_set
			dw #2010 //FRAM address

			dw ZONE0
			db 0,14
			dw zone_set
			dw #2040 

			dw DEBUG0
			db 0,6
			dw debug_set
			dw #203F 

cur_num		//a-fram value, hl-value table, b-max_cur //out a-cursor number
			ld e,a
			xor a
1			ex af,af'			
			ld a,(hl)
			cp e
			jr nz,2F
			ex af,af'
			ret
2			inc hl
			ex af,af'	
			inc a	
			djnz 1B
			xor a // 0 in wrong value
			ret

defaults    db #41  //number of value for loading defaults
zxi_000		db #00	//machine select
zxi_001		db #3F	//audio select
zxi_002		db #03	//IDE - HOOD ports
zxi_003		db #01	//RTC - enabled
zxi_004		db #01	//LED Matrix - left/right
zxi_005		db #00	//Wifi - disabled
zxi_006		db #01	//SD - enabled
zxi_007		db #01	//Kempston - enabled
zxi_008		db #01	//LIFO stack - enabled
zxi_009		db #01	//Video Timing - 128/+2
zxi_00A		db #04	//Video synch - bit2-disable HotPlug detection; bit0-DVI
zxi_00B		db #03	//Video extra - Gigascreen 2
zxi_00C		db #01	//Video Timex - enabled
zxi_00D		db #01	//Video ULAplus - enabled
zxi_00E		db #00	//reserved
zxi_00F		db #00	//Video ScanLine - disabled
zxi_010		db #00	//Custom Rom - disabled
zxi_011		db #01	//Kempston Mouse
zxi_012		db #03	//DMA
zxi_013		db #00	//reserved
zxi_014		db #00	//reserved
zxi_015		db #00	//reserved
zxi_016		db #00	//reserved
zxi_017		db #00	//reserved
zxi_018		db #00	//TurboSound FM
zxi_019		db #00	//SID
zxi_01A		db #00	//reserved
zxi_01B		db #00	//reserved
zxi_01C		db #00	//reserved
zxi_01D		db #00	//reserved
zxi_01E		db #00	//reserved
zxi_01F		db #00	//reserved
zxi_020		db #02	//Extra short press
zxi_021		db #00
zxi_022		db #00	//reset StartUp order
zxi_023		db #00
zxi_024		db #00
zxi_025		db #00
zxi_026		db #00
zxi_027		db #00
zxi_028		db #00
zxi_029		db #00
zxi_02A		db #00
zxi_02B		db #00
zxi_02C		db #00	//Z-Controller
zxi_02D		db #01	//divSD
zxi_02E		db #00	//SafeNMI
zxi_02F		db #03	//INT
zxi_030		db #00
zxi_031		db #00
zxi_032		db #00
zxi_033		db #00
zxi_034		db #00
zxi_035		db #00
zxi_036		db #00
zxi_037		db #00
zxi_038		db #00
zxi_039		db #01 //UART - WiFi enable
zxi_03A		db #00
zxi_03B		db #00
zxi_03C		db #00
zxi_03D		db #00
zxi_03E		db #00
zxi_03F		db #00 //Diagnostic
zxi_040		db #01 //Time Zone


; --------------- T E X T---------------------------------------
TEXT0 	 	dc 16,7,"LMN128"
TEXT1    	db 16,69,"MB03+ Ultimate  ",16,7+64,"     SetUp"
			dc " "
TEXT2	 	db 16,65,"Cursor-navigation; Enter-change; R-restart"
			dc " "
TEXT3	 	db 16,65,"L-load BIOS defaults+restart"
			dc " "			


STRIPS		db 16,66,32,32
			db 16,70,32,32
			db 16,68,32,32,32,32,32
			db 16,69,32,32,32,32,32
			db 16,7,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32+128

SELECT		db 16,66,0
			dc " "		
DESELECT	dc "  "			

STARTUP1	db 16,67,"Start-up (power on & reset)"
			dc " "
STARTUP2	db 16,7,"Firmware full boot"
			dc " "
STARTUP3	db 16,7,"Firmware fast boot"
			dc " "	
STARTUP4	db 16,7,"BSDOS boot"
			dc " "
STARTUP5	db 16,7,"esxDOS boot (SD)"
			dc " "	
STARTUPinfo	db 16,7,"press 'Enter' during reset for Firmware full boot"
			dc " "										

AUDIO1		db 16,67,"Audio "
			dc " "
AUDIO2		db 16,7,"enable ULA audio"
			dc " "
AUDIO3		db 16,7,"enable TurboSound (3xAY or TSFM)"
			dc " "
AUDIO4		db 16,7,"enable Sam Coupe SAA1099 chip"
			dc " "
AUDIO5		db 16,7,"enable MonsterBlaster (SounDrive, etc.)"
			dc " "
AUDIO6		db 16,7,"enable General Sound"
			dc " "
AUDIO7		db 16,7,"enable SID"
			dc " "	

SID1		db 16,67,"SID"
			dc " "
SID2		db 16,7,"Chip model: 0-6581, 1-8580"
			dc " "
SID3		db 16,7,"Frequency: 0-PAL, 1-NTSC"
			dc " "		

TSFM1		db 16,67,"TurboSound FM"
			dc " "
TSFM2		db 16,7,"Chip model: 0-AY, 1-YM"
			dc " "							
TSFM3		db 16,7,"Stereo: 0-ACB, 1-ABC"
			dc " "	
TSFM4		db 16,7,"select 0-3xAY or 1-TSFM(2xYM2203)"
			dc " "							

LED1		db 16,67,"LED Matrix "
			dc " "
LED2		db 16,7,"none (disabled)"
			dc " "
LED3		db 16,7,"left/right global audio peak meters"
			dc " "
LED4		db 16,7,"GeneralSound (A/B/C/D) audio peak meters"
			dc " "
LED5		db 16,7,"char mode"
			dc " "
LED6		db 16,7,"Memory ports map"
			dc " "
LED7		db 16,7,"Memory CPU map"
			dc " "
LED8		db 16,7,"Memory CPU /M1 only map"
			dc " "		
LED9		db 16,7,"Memory Ultimate mode map"
			dc " "											

MMC1		db 16,67,"SD/MMC "
			dc " "
MMC2		db 16,7,"enable"
			dc " "

JOY1		db 16,67,"Joystick "
			dc " "
JOY2		db 16,7,"none (disabled)"
			dc " "
JOY3		db 16,7,"Kempston "
			dc " "

DV1			db 16,67,"Video timing (ZX machine)"
			dc " "
DV2			db 16,7,"ZX Spectrum 48"
			dc " "
DV3			db 16,7,"ZX Spectrum 128+/+2 grey case"
			dc " "			
DV4			db 16,7,"Harlequin 128 (model 2D)"
			dc " "
DV5			db 16,7,"ZX Spectrum 128+2A/2B/+3"
			dc " "
DV51		db 16,7,"48K clones on 3.5000MHz: Humble48, etc."
			dc " "	
DV52		db 16,7,"Pentagon on 3.5000MHz"
			dc " "			
DV53		db 16,7,"Karabas 128"
			dc " "							

DVO1		db 16,67,"Digital video output "
			dc " "
DVO2		db 16,7,"enable legacy DVI"
			dc " "
DVO3		db 16,7,"enable ULTIMATE synchron. - only for some TV"
			dc " "
DVO4		db 16,7,"HotPlug detection disable (TV/Monitor signal)"
			dc " "

DVE1		db 16,67,"GigaScreen - colours sum effect"
			dc " "
DVE2		db 16,7,"none (disabled)"
			dc " "
DVE3		db 16,7,"GigaScreen mode0: 2 VRAMs always mixed"
			dc " "
DVE4		db 16,7,"GigaScreen mode1: two video frames mix"
			dc " "	
DVE5		db 16,7,"GigaScreen mode2: autodetect mode1"
			dc " "
DVE6		db 16,7,"GigaScreen mode3: KeyLayer"
			dc " "			

DVT1		db 16,67,"Timex graphics"
			dc " "
DVT2		db 16,7,"enable TIMEX gfx modes"
			dc " "

DVU1		db 16,67,"ULAplus"
			dc " "
DVU2		db 16,7,"enable ULAplus palettes"
			dc " "
DVU3		db 16,7,"enable TIMEX mode select by ULAplus regs"	
			dc " "
DVU4		db 16,7,"enable SLAM+ slow ports (not implemented)"	
			dc " "	

DVP1		db 16,67,"Scanline (old CRT/TV) effect"
			dc " "
DVP2		db 16,7,"none (disabled)"
			dc " "
DVP3		db 16,7,"1/2"	
			dc " "
DVP4		db 16,7,"1/4"	
			dc " "	
DVP5		db 16,7,"1/8"	
			dc " "
DVP6		db 16,7,"1/16"	
			dc " "
DVP7		db 16,7,"1/32"	
			dc " "
DVP8		db 16,7,"1/64"	
			dc " "
DVP9		db 16,7,"1/128"	
			dc " "																			

MICE1		db 16,67,"Mouse/Keyboard"
			dc " "
MICE2		db 16,7,"none (disabled)"
			dc " "			
MICE3		db 16,7,"K-Mouse master"
			dc " "
MICE4		db 16,7,"K-Mouse slave"
			dc " "			
MICE5		db 16,7,"Keyboard"
			dc " "	

ZCSD1		db 16,67,"Z-Controller SD"
			dc " "
ZCSD2		db 16,7,"none (disabled)"
			dc " "			
ZCSD3		db 16,7,"on first SD slot"
			dc " "
ZCSD4		db 16,7,"on second SD slot"
			dc " "

DIVSD1		db 16,67,"divSD"
			dc " "
DIVSD2		db 16,7,"select ROM: 0-FPGA(rescue esxDOS), 1-FLASH"
			dc " "
DIVSD3		db 16,7,"swap order first/second SD"
			dc " "

DMA1		db 16,67,"DMA"
			dc " "
DMA2		db 16,7,"enable MB03+ DMA"
			dc " "		
DMA3		db 16,7,"enable detection other DMA e.g. in eLeMeNt ZX"
			dc " "	

NMI1		db 16,67,"SafeNMI (don't enable with eLeMeNt ZX)"
			dc " "
NMI2		db 16,7,"enable"
			dc " "	

INT1		db 16,67,"Interrupt"
			dc " "
INT2		db 16,7,"enable SaveINT (don't use it with eLeMeNt ZX)"
			dc " "				
INT3		db 16,7,"enable HGFX Interrupt generation"
			dc " "	

EXTS1		db 16,67,"EXTRA button"
			dc " "	
EXTS2		db 16,7,"none (disabled)"
			dc " "		
EXTS3		db 16,7,"Warm reset"
			dc " "	
EXTS4		db 16,7,"LED Matrix mode"
			dc " "	
EXTS5		db 16,7,"GigaScreen"
			dc " "					

ZONE1		db 16,67,"RTC time zone"
			dc " "	
ZONE2		db 16,7,"GMT+0 (Canary Island)"
			dc " "		
ZONE3		db 16,7,"GMT+1 (Zlin)"
			dc " "	
ZONE4		db 16,7,"GMT+2 (Santorini)"
			dc " "	
ZONE5		db 16,7,"GMT+3 (Madagascar)"
			dc " "			
ZONE6		db 16,7,"GMT+4 (Mauritius)"
			dc " "		
ZONE7		db 16,7,"GMT+5 (Sri Lanka)"
			dc " "		
ZONE8		db 16,7,"GMT-8 (Pacific Time)"
			dc " "		
ZONE9		db 16,7,"GMT-7 (Yukon)"
			dc " "	
ZONEA		db 16,7,"GMT-6 (Colorado Springs)"
			dc " "		
ZONEB		db 16,7,"GMT-5 (Haiti) "
			dc " "	
ZONEC		db 16,7,"GMT-4 (Atlantic Time)"
			dc " "	
ZONED		db 16,7,"GMT-3 (Greenland)"
			dc " "	
ZONEE		db 16,7,"GMT-2"
			dc " "	
ZONEF		db 16,7,"GMT-1 (Azores)"
			dc " "	

DEBUG1		db 16,67,"Diagnostics"
			dc " "
DEBUG2		db 16,7,"none "
			dc " "		
DEBUG3		db 16,7,"Video sync."
			dc " "	
DEBUG31		db 16,7,"Audio level"
			dc " "
DEBUG32		db 16,7,"Status info"
			dc " "				
DEBUG4		db 16,7,"Video Test Text Pattern"
			dc " "
DEBUG5		db 16,7,"Video Test Colour Moving Pattern"
			dc " "	

ESP1		db 16,67,"UART (Wi-Fi)"
			dc " "
ESP2		db 16,7,"enable"
			dc " "
ESP3		db 16,7,"set lower RF power of Wi-Fi"
			dc " "	

UART1		db 16,67,"UART (Wi-Fi) type"
			dc " "
UART2		db 16,7,"internal USB-UART - microUSB"
			dc " "		
UART3		db 16,7,"WiFi - ESP01 module"
			dc " "	
							
; --------------- L I B R A R I E S ---------------------------------------	
	
//INCLUDE "nasobeniHLDE.a80"
	INCLUDE "draw-jugo.a80"
	INCLUDE "cls.a80"
	INCLUDE "iinkey.a80"
//	INCLUDE "wait.a80"
//	INCLUDE "t42.a80"
//	INCLUDE "txy.a80"
	INCLUDE "txy51.a80"
	INCLUDE "txy32.a80"
//	INCLUDE "sprite2.a80"
//	INCLUDE "xdec_06.a80"
//	INCLUDE "cf.a80"
MB03pluslogo
//	INCBIN "MB03+LOGOv2.bin"
ultimatelogo	
//	INCBIN "ULTIMATE.bin"
dots	
//	INCBIN "DOTS.bin"	
CaroLogo
//	INCBIN "CaroLogo.bin"
EsxLogo
//	INCBIN "ESXLOGO.bin"
BSDOSLogo
//	INCBIN "BSDOSLOGO.bin"	
DATE		db 16,0
	LUA ALLPASS
	_pc('db	"' .. os.date("%Y%m%d") .. '"') 
	ENDLUA
	dc " " 
		//block 8 // kompenzace delky souboru kvuli os.date


CROM1		db 16,67,"Custom ROMs"
			dc " "
CROM2		db 16,7,"none (disabled)"
			dc " "			
CROM3		db 16,7,"cROM0   (16KB mode)                            "
			dc " "
CROM4		db 16,7,"cROM1   (16KB mode)                            "
			dc " "
CROM5		db 16,7,"cROM2   (16KB mode)                            "
			dc " "
CROM6		db 16,7,"cROM3   (16KB mode)                            "
			dc " "
CROM7		db 16,7,"cROM4   (16KB mode)                            "
			dc " "
CROM8		db 16,7,"cROM5   (16KB mode)                            "
			dc " "
CROM9		db 16,7,"cROM6   (16KB mode)                            "
			dc " "
CROMA		db 16,7,"cROM7   (16KB mode)                            "
			dc " "
CROMB		db 16,7,"cROM0-3 (64KB mode)                            "
			dc " "
CROMC		db 16,7,"cROM4-7 (64KB mode)                            "
			dc " "			
											
endramcode	

CODE	=	#AF
USR	=	#C0
LOAD	=	#EF
CLEAR	=	#FD
RANDOMIZE =	#F9
		
	org	#5C00		;; Basic loader
baszac	db	0,1			;; Line number
	dw	linlen			;; Line length
linzac
	db	CLEAR,'8',#0E,0,0
	dw	ramcode-1
	db	0,':'
	db	LOAD,'""',CODE,':'
	db	RANDOMIZE,USR,'8',#0E,0,0
	dw	ramcode
	db	0,#0D
linlen	=	$-linzac
baslen	=	$-baszac
	
		
	savesna  "bios.sna",ramcode
	EMPTYTAP "bios.tap"
	SAVETAP  "bios.tap" , BASIC, bios , baszac,baslen,1
	SAVETAP  "bios.tap",CODE,"bios",maincode,endramcode-maincode,maincode
	ENDMODULE
		